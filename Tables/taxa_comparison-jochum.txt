library(tidyverse)
library(phyloseq)
################################################################################
##################### Data import / Preprocessing ##############################
################################################################################
getwd()
#setwd("c:/github/microbial/step2_kraken2_analysis/")

# if wanting to load the objects
#load("heat-tree.RData")

# reading in metadata
sample_info_tab <- read.table("Combined_BALF_GO_Terms_metadata.tsv", header = TRUE, sep = "\t")
dim(sample_info_tab)
head(sample_info_tab)[, 1:5]

# reading in tax file
full_tax_tab <- read.table("all_step2_kraken2_summaries.tsv", header = TRUE, row.names = 1, sep = "\t", quote = '', comment.char="")
dim(full_tax_tab)
names(full_tax_tab)

# making table of just counts (taxid as rows)
tax_counts_tab <- full_tax_tab[, grep("counts", names(full_tax_tab))]
head(tax_counts_tab)[, 1:5]
# shortening names
names(tax_counts_tab) <- sub("_step2_kraken2_mason_db_read_counts", "", names(tax_counts_tab))
head(tax_counts_tab)[, 1:5]

# making table of just tax info
tax_info_tab <- full_tax_tab[, 1:7]
head(tax_info_tab)

# filtering down to only the 86 samples in the GO term analysis
target_samples <- scan("GO_TERM_samples.tsv", what = "character")[-1]
target_samples_no_neg<-target_samples
#add the negative controls back into the analysis
negs<-c("CRR125995",'CRR125996',"CRR125997","CRR125998")
target_samples<-c(target_samples,negs)
head(target_samples)
length(target_samples)

target_tax_counts_tab <- tax_counts_tab %>% select(all_of(target_samples))
dim(target_tax_counts_tab)

# another look they were all found even though right size table came through
setdiff(target_samples, names(target_tax_counts_tab))

target_sample_info_tab <- sample_info_tab %>% filter(accession %in% target_samples)
dim(target_sample_info_tab)
setdiff(target_samples, target_sample_info_tab$accession)

target_sample_info_tab <- target_sample_info_tab %>% column_to_rownames("accession")
# filtering down to just Bacteria
bac_tax_counts_tab <- target_tax_counts_tab[!is.na(tax_info_tab$domain) & tax_info_tab$domain == "Bacteria", ]
dim(bac_tax_counts_tab)
colSums(bac_tax_counts_tab) / colSums(target_tax_counts_tab) * 100
# that is removing a ton, like 99% from some, i hope it's just that there are a ton of unclassifieds like kmer tax-assignment does, let's check though

target_tax_counts_tab[1, ] / colSums(target_tax_counts_tab) * 100
# oh geez, yea
round(target_tax_counts_tab[1, ] / colSums(target_tax_counts_tab) * 100, 3) %>% as.matrix %>% as.vector %>% summary
# over 75% of them are >88% Unclassified at all, silly short-read taxonomy, ha

colSums(bac_tax_counts_tab) / (colSums(target_tax_counts_tab) - target_tax_counts_tab[1, ]) * 100
# there are still some with very low relative proportions, like CRR125941 CRR125949 only having 7% remaining, let's see what's in them
target_tax_counts_tab %>% rownames_to_column("taxid") %>% select(taxid, CRR125941, CRR125949) %>% arrange(desc(CRR125949)) %>% head

tax_info_tab[row.names(tax_info_tab) == "2697049", ] # ahh, a virus, are these viral enriched samples?

# moving onto the figure for now
bac_tax_info_tab <- tax_info_tab[!is.na(tax_info_tab$domain) & tax_info_tab$domain == "Bacteria", ]
dim(bac_tax_info_tab)
# making sure all is good
all.equal(row.names(bac_tax_info_tab), row.names(bac_tax_counts_tab))



#MJ-Make a pseq-object so you can have something to filter in and out of for decontam and metacoder...sorry Mike =)
pseq<-phyloseq(otu_table(bac_tax_counts_tab,taxa_are_rows = T),tax_table(as.matrix(bac_tax_info_tab)),sample_data(target_sample_info_tab))
pseq


################################################################################
##################### decontam ##############################
################################################################################

library(decontam)

#export the shen et al. samples for parsing with decontam
pseq_shen<-subset_samples(pseq,bioproject=="CRA002476")
pseq_not_shen<-subset_samples(pseq,bioproject!="CRA002476")
pseq_shen

count_df_shen<-abundances(pseq_shen)
tax_table(pseq_shen) %>% as("matrix")# %>% subset(select = colSums(!is.na(.)) > 0) %>% as_tibble(rownames = "OTU") -> taxon.tbl
library(microbiome)
tax_df_shen<-data.frame(tax_table(pseq_shen))
tax_df_shen
sam_shen<-meta(pseq_shen)
vector_for_decontam <- sam_shen$case=="Control_Neg"
vector_for_decontam                    

colSums(count_df_shen)
count_df_shen<-as.data.frame(otu_table(pseq_shen))
colSums(count_df_shen)

contam_df_shen <- isContaminant(t(count_df_shen), neg=vector_for_decontam)
table(contam_df_shen$contaminant) # identified 4644 as contaminants 
# getting vector holding the identified contaminant IDs
contam_shen <- row.names(contam_df_shen[contam_df_shen$contaminant == TRUE, ])
contam_shen<-as.factor(contam_shen)
contam_shen



count_df_shen<-as_tibble(count_df_shen,rownames = "taxid")
count_df_shen
#count_df_shen[1]<-NULL

clean_count_df_shen<-count_df_shen%>%filter(!taxid%in%contam_shen)

a<-clean_count_df_shen%>%select(-taxid)
b<-count_df_shen%>%select(-taxid)
perc_remain<-(colSums(a)/colSums(b))*100
#write.table(perc_remain,"percent_remaining_post_decontam.tsv",sep = "\t",quote = F,row.names = F)
tax<-as_tibble(bac_tax_info_tab,rownames="taxid")
contaminants<-tax%>%filter(taxid %in% contam_shen)
not_contaminants<-tax%>%filter(!taxid %in% contam_shen)





not_contaminants
#write.table(x = contaminants,file = "Shen_contaminants.tsv",sep = "\t",row.names = F,quote = F)
#write.table(x = not_contaminants,file = "Shen_not_contaminants.tsv",sep = "\t",row.names = F,quote = F)

contam_shen<-as.factor(contam_shen)

contaminants$taxid<-as.character(contaminants$taxid)
not_contaminants$taxid<-as.character(not_contaminants$taxid)

pseq_shen_decontam<-prune_taxa(taxa = contaminants$taxid,pseq_shen)
pseq_shen_decontam


pseq_decontam<-merge_phyloseq(pseq_not_shen,pseq_shen_decontam)
pseq_decontam_no_neg<-subset_samples(physeq = pseq_decontam,case!="Control_Neg")

#quicky regex stuff to update the case terms 
sample_data(pseq_decontam_no_neg)$case<-gsub('Control_Healthy','Uninfected',sample_data(pseq_decontam_no_neg)$case)
sample_data(pseq_decontam_no_neg)$case<-gsub('COVID 19','COVID-19',sample_data(pseq_decontam_no_neg)$case)
sample_data(pseq_decontam_no_neg)$case<-gsub('Control_Sick','CAP',sample_data(pseq_decontam_no_neg)$case)

################################################################################
################################ Maaslin2 ######################################
################################################################################

library(Maaslin2)
#make a data frame containine the abundances and metadata for the counts
df_input_data<-data.frame(t(otu_table(pseq_decontam_no_neg)))
df_input_metadata<-data.frame(sample_data(pseq_decontam_no_neg))

#run Maaslin2 on the taxa counts using following paramenters

# CLR normalization
# Log transformation
# 0.1 and 0.1 abundance and prevalence cutoffs
# Bejamini Hochberg multiple test correction

#########################################
# warning this takes FOREVER to run
##########################################
case_norm<-Maaslin2(
  input_data = df_input_data,
  input_metadata = df_input_metadata,
  output="./terms_vs_case_comp_norm_09102021",
  min_abundance = 0.01, 
  min_prevalence = 0.1, 
  normalization = "CLR",
  transform = "LOG",
  analysis_method = "LM",
  max_significance = 0.05,
  random_effects = c("sample_name","publication"),
  fixed_effects = c("case"),
  correction="BH",
  standardize = TRUE,
  cores = 20,
  plot_heatmap = TRUE,
  plot_scatter = TRUE,
  heatmap_first_n =100,
  reference="case,COVID19")

###########################################

#make a copy of the results
res<-as_tibble(case_norm$results)
#filter the results to only include significatn taxa
keep<-res%>%filter(qval<0.25)
#fix the character
keep<-keep%>%mutate(feature=gsub("X","",feature))

#make a phyloseq_object that has subsets only the stat. significant taxa
physeq_keep<-prune_taxa(taxa = keep$feature,x =  pseq_decontam_no_neg)

physeq_keep #[ 135 taxa and 86 samples ]
# make a key containing the taxonomy of the sig. taxa
keep_tax<-data.frame(tax_table(physeq_keep))  
keep_tax$feature<-rownames(keep_tax)

keep<-inner_join(keep,keep_tax)
unique(keep$genus)

# make a hack that recreates the metaphlan style lineage
keep<-keep%>%mutate(lineage=paste0("d__",keep$domain,
                                   ";p__",keep$phylum,
                                   ";c__",keep$class,
                                   ";o__",keep$order,
                                   ";f__",keep$family,
                                   ";g__",keep$genus,
                                   ";s__",keep$species),
                    lineage=gsub("d__NA;p__NA;c__NA;o__NA;f__NA;g__NA;s__NA",NA,lineage),
                    lineage=gsub(";p__NA;c__NA;o__NA;f__NA;g__NA;s__NA","",lineage),
                    lineage=gsub(";c__NA;o__NA;f__NA;g__NA;s__NA","",lineage),
                    lineage=gsub(";o__NA;f__NA;g__NA;s__NA","",lineage),
                    lineage=gsub(";f__NA;g__NA;s__NA","",lineage),
                    lineage=gsub(";g__NA;s__NA","",lineage),
                    lineage=gsub(";s__NA","",lineage))

head(keep$lineage) # looks good

# make another column that has the classifications without the ranks
keep<-unite(data = keep,col ="classification", c("domain","phylum","class","order","family","genus","species"),sep=";",na.rm = T,remove = F)

head(keep$classification) #cool





################################################################################
################################ Metacoder ######################################
################################################################################


#################### ok mike here is the issue:#################################
#I am trying to filter from the display only the taxa with significance  based on the mmaaslin2 analysis,
#but if I do based on the phyloseq object OR anywhere prior to the "compare_groups" function in metacoder,
#the metacoder will incorectly calulate the taxa_counts and subsequent log2 median ratios based on the normalize and 
#abundances of only the subsetted taxa, which then yields incorrect log2median median ratio visualizations

# The objective of this script is to do the following:
#
# Create a heat tree matrix visualization
# that includes ONLY the statistically significant taxa derived from the masslin2 results, 
# but still contains the correctly calculated log2 median ratios based on the abundances of the 
# entire decontamed dataset (pseq_decontam_no_neg) .


################################################################################
pseq_decontam_no_neg #   [ 8661 taxa and 86 samples ]
# This is the phyloseq object containing the raw untransformed counts 
# with th post decontamed Shen samples and the negative controls removed 


library(metacoder)

lineage_vector <- paste0(
  "d__", bac_tax_info_tab$domain, ";",
  "p__", bac_tax_info_tab$phylum, ";",
  "c__", bac_tax_info_tab$class, ";",
  "o__", bac_tax_info_tab$order, ";",
  "f__", bac_tax_info_tab$family, ";",
  "g__", bac_tax_info_tab$genus, ";",
  "s__", bac_tax_info_tab$species)

# and the don't have the "NA" ones, they just have nothing for them, so removing that business so ours stop at the last rank present like theirs
lineage_vector <- gsub("(;[c-s]__NA)*$", "", lineage_vector)
head(lineage_vector)
# beautiful, building table like hmp_otus
tab_for_taxa_object <- data.frame(taxid = row.names(bac_tax_info_tab), lineage = lineage_vector, bac_tax_counts_tab)
dim(tab_for_taxa_object)
tab_for_taxa_object<-tab_for_taxa_object%>%select(-negs)

head(tab_for_taxa_object)
head(hmp_otus)[, 1:10]
str(tab_for_taxa_object)
# i think all's ok, let's give it a shot






library(metacoder)

pseq_obj<-parse_phyloseq(physeq_keep) #MJ here trying to pase from the sig. taxa only

taxa_obj <- parse_tax_data(tab_for_taxa_object,
                           class_cols = "lineage",
                           class_sep = ";",
                           class_regex = "^([c-s]{1})__(.*)$",
                           class_key = c(tax_rank = "info", tax_name = "taxon_name"))



# library(taxa)
# # looks ok so far, following along with same example page to filter low abundance things, just picking anything
taxa_obj_filt <- filter_taxa(taxa_obj, n_obs >5)
pseq_obj_filt <- filter_taxa(pseq_obj, n_obs > 5)


# 
dim(taxa_obj_filt$edge_list)# 755   2
dim(pseq_obj_filt$edge_list)# 92  2
 

# this is where we normalize across samples (i'm curious what this spits out when there are negative values in the table like from the vst, ha)
#################################################################################
pseq_obj_filt$data$tax_proportions <- calc_obs_props(pseq_obj_filt, "otu_table") # call this by the otu-table
taxa_obj_filt$data$tax_proportions <- calc_obs_props(taxa_obj_filt, "tax_data")
########################################################################################

# ML here- i don't yet understand why the calc_taxon_abund() step is dropping us down to 755, when all of our taxa are unique already... but oh well

# MJ here, could this have something to do with the parse taxa_data not yielding rank names 
# I noticed that the ranks for the taxa_obj are all listed as NA
taxon_ranks(taxa_obj) 
# whereas the pseq_obj hase the correct classifications.   
# I'm a little concerned that maybe there are some dropping down of taxonomy 
# due to duplicate names taht might occure in different ranks
taxon_ranks(pseq_obj) 


pseq_obj_filt$data$tax_abund <- calc_taxon_abund(pseq_obj_filt, "tax_proportions", cols = target_samples_no_neg)

taxa_obj_filt$data$tax_abund <- calc_taxon_abund(taxa_obj_filt, "tax_proportions", cols = target_samples_no_neg)

# not sure if we want the groups argument here or not
pseq_obj_filt$data$tax_occ <- calc_n_samples(pseq_obj_filt, "tax_abund")
taxa_obj_filt$data$tax_occ <- calc_n_samples(taxa_obj_filt, "tax_abund")

# doing the compare now with the abund table
pseq_obj_filt$data$compare_tax_abund <- compare_groups(pseq_obj_filt,
                                                       "tax_abund",
                                                       cols = target_samples_no_neg,
                                                       groups = pseq_obj_filt$data$sample_data$case)



taxa_obj_filt$data$compare_tax_abund <- compare_groups(taxa_obj_filt,
                                                       "tax_abund",
                                                       cols = target_samples_no_neg,
                                                       groups =pseq_obj_filt$data$sample_data$case)



#make the heat tree matrix
pseq_fig1 <- heat_tree_matrix(pseq_obj_filt,
                              data = "compare_tax_abund",
                              node_size = n_obs,
                              node_label = taxon_names,
                              node_color = log2_median_ratio,
                              node_color_range = diverging_palette(),
                              node_color_trans = "area",
                              node_color_interval = range(pseq_obj_filt$data$compare_tax_abund$log2_median_ratio, finite = TRUE),
                              node_size_axis_label = "Taxa counts",
                              node_color_axis_label = "Log2 median ratio",
                              layout = "davidson-harel",
                              key_size = 0.6,
                              seed = 314,  
                              aspect_ratio = 1,
                              initial_layout = "reingold-tilford",
                              repel_labels=T,
                              output_file = "node_color_trans_linear.pdf",
                              verbose = TRUE)

pseq_fig1
#ISSUE: It looks great but the numbers are wayyy off because 
# the compare groups command is using the tax_abunds which was conducted 
# on only the subset taxa, which is yielding incorrect log2 median ratios 
# and a subsequent messed up visual



#head up this command will take forever as it will try to map all the taxa
taxa_fig1 <- heat_tree_matrix(taxa_obj_filt,
                              data = "compare_tax_abund",
                              node_size = n_obs,
                              node_label = taxon_names,
                              node_color = log2_median_ratio,
                              node_color_range = diverging_palette(),
                              node_color_trans = "linear",
                              node_color_interval = range(taxa_obj_filt$data$compare_tax_abund$log2_median_ratio, finite = TRUE),
                              node_size_axis_label = "Taxa counts",
                              node_color_axis_label = "Log2 median ratio",
                              layout = "davidson-harel",
                              key_size = 0.6,
                              seed = 314,  
                              aspect_ratio = 1,
                              initial_layout = "reingold-tilford",
                              repel_labels=T,
                              output_file = "node_color_trans_linear.pdf",




